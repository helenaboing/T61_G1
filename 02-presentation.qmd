---
title: "Análise de Vendas e Clientes"
author: "Helena Boing, Alejandra Moreira, Joana Costa, Lohanna Pombo, Pedro Sequeira"
format: revealjs
execute: 
  echo: false #Show (TRUE) or hide (FALSE) the code in the knitted output.
  eval: true #Run (TRUE) or skip (FALSE) code in the chunk.
  warning: false #Show (TRUE) or suppress (FALSE) warnings in the output.
  error: false #Show (TRUE) or suppress (FALSE) errors in the output. If FALSE, knitting stops on error.
  message: false #Show (TRUE) or suppress (FALSE) messages (e.g., package startup messages) in the output.
  output: true #Show (TRUE) or hide (FALSE) output from the chunk. (Not a standard knitr option; may refer to include.)
  cache: true #Cache results so code isn't re-run if unchanged.
  freeze: false #Prevents output from being updated on re-knit.
---

```{r setup, include=FALSE}
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)    # For comma() and percent()
library(tidyr)
load("dfinal.Rda")

# Create age groups
dfinal <- dfinal %>%
  mutate(
    FaixaIdade = case_when(
      Idade <= 18 ~ "0-18",
      Idade <= 30 ~ "19-30",
      Idade <= 45 ~ "31-45",
      Idade <= 60 ~ "46-60",
      TRUE ~ "60+"
    )
  )
```

## Maioria dos clientes tem 31–45 anos; gêneros igualmente representados

```{r}
# Prepare data for the pyramid
pyramid_data <- dfinal %>%
  distinct(CustomerKey, Gender, FaixaIdade) %>%
  count(Gender, FaixaIdade) %>%
  mutate(
    n = ifelse(Gender == "M", -n, n),  # Make male values negative for the pyramid effect
    Gender = factor(Gender, levels = c("M", "F"), labels = c("Masculino", "Feminino")),
    FaixaIdade = factor(FaixaIdade, 
                       levels = c("0-18", "19-30", "31-45", "46-60", "60+"),
                       ordered = TRUE)
  )

# Create the pyramid plot
ggplot(pyramid_data, aes(x = FaixaIdade, y = n, fill = Gender)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("Masculino" = "#4682B4", "Feminino" = "#FF69B4")) +
  coord_flip() +
  scale_y_continuous(
    labels = function(x) abs(x),
    breaks = pretty(pyramid_data$n)
  ) +
  labs(
    title = "Pirâmide Demográfica dos Clientes",
    x = "Faixa Etária",
    y = "Número de Clientes",
    fill = "Gênero"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(hjust = 0.5, face = "bold")
  )
```

## Há um pico de ventas no 2º trimestre de 2019
```{r}
vendas_trimestrais <- dfinal %>%
  mutate(
    Ano = year(OrderDate),
    TrimestreNum = quarter(OrderDate),
    DataTrimestre = make_date(Ano, (TrimestreNum - 1) * 3 + 1, 1),
    Trimestre = paste0("Q", TrimestreNum, " ", Ano)
  ) %>%
  group_by(Trimestre, DataTrimestre) %>%
  summarise(TotalVendas = sum(SalesAmount, na.rm = TRUE), .groups = "drop") %>%
  # Filter out Q3 2019
  filter(!(Ano == 2019 & TrimestreNum == 3)) %>%
  arrange(DataTrimestre) %>%
  mutate(Trimestre = factor(Trimestre, levels = unique(Trimestre)))

ggplot(vendas_trimestrais, aes(x = Trimestre, y = TotalVendas, group = 1)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "darkblue") +
  labs(
    title = "Volume de Vendas por Trimestre",
    x = "Trimestre",
    y = "Total de Vendas"
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Sales by Day of the Week
```{r}
vendas_por_dia <- dfinal %>%
  mutate(Weekday = wday(OrderDate, label = TRUE, abbr = FALSE, locale = "pt_BR")) %>%
  group_by(Weekday) %>%
  summarise(TotalVendas = sum(SalesAmount, na.rm = TRUE), .groups = "drop") %>%
  mutate(Weekday = factor(Weekday, 
    levels = c("domingo", "segunda-feira", "terça-feira", "quarta-feira",
               "quinta-feira", "sexta-feira", "sábado")))

ggplot(vendas_por_dia, aes(x = Weekday, y = TotalVendas)) +
  geom_col(fill = "steelblue") +
  geom_text(aes(label = round(TotalVendas, 2)), vjust = 1.5, color = "white", size = 4) +
  labs(
    title = "Total de Vendas por Dia da Semana",
    x = "Dia da Semana",
    y = "Valor Total de Vendas"
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal()
```

## Visão Geral do Negócio

- Total de vendas: `r scales::comma(sum(dfinal$SalesAmount))` €
- Número de clientes únicos: `r dplyr::n_distinct(dfinal$CustomerKey)`
- Número de produtos vendidos: `r dplyr::n_distinct(dfinal$ProductKey)`
- Período analisado: `r format(min(dfinal$OrderDate), '%d/%m/%Y')` a `r format(max(dfinal$OrderDate), '%d/%m/%Y')`

## Top 10 Produtos Mais Vendidos
```{r}
top10 <- dfinal %>%
  group_by(ProductKey, ProductName) %>%
  summarise(TotalQuantity = sum(OrderQuantity, na.rm = TRUE), .groups = "drop") %>%
  slice_max(TotalQuantity, n = 10) %>%
  arrange(TotalQuantity)

ggplot(top10, aes(x = reorder(ProductName, TotalQuantity), y = TotalQuantity)) +
  geom_col(fill = "darkgreen") +
  coord_flip() +
  labs(
    title = "Top 10 Produtos Mais Vendidos",
    x = "Produto",
    y = "Quantidade Vendida"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    plot.title = element_text(face = "bold", hjust = 0.5)
  )
```

## Lucro por Categoria
```{r}
dfinal %>%
  group_by(ProductCategoryName) %>%
  summarise(LucroTotal = sum(Lucro, na.rm = TRUE)) %>%
  arrange(desc(LucroTotal)) %>%
  ggplot(aes(x = reorder(ProductCategoryName, LucroTotal), y = LucroTotal)) +
    geom_bar(stat = "identity", fill = "steelblue") +
    coord_flip() +
    labs(
      title = "Lucro Total por Categoria de Produto",
      x = "Categoria",
      y = "Lucro Total"
    ) +
    scale_y_continuous(labels = scales::comma) +
    theme_minimal()
```

## Comportamento de Compra

### Taxa de Recompra
```{r, include=FALSE}
clientes_multiplas_compras <- dfinal %>%
  dplyr::group_by(CustomerKey) %>%
  dplyr::summarise(NumCompras = dplyr::n_distinct(SalesOrderNumber)) %>%
  dplyr::filter(NumCompras >= 2) %>%
  nrow()

taxa_recompra <- round(
  clientes_multiplas_compras / dplyr::n_distinct(dfinal$CustomerKey) * 100, 1
)
media_tempo_compras <- dfinal %>%
  dplyr::group_by(CustomerKey) %>%
  dplyr::filter(n() >= 2) %>%
  dplyr::summarise(
    PrimeiraCompra = min(OrderDate),
    UltimaCompra = max(OrderDate),
    NumCompras = n()
  ) %>%
  dplyr::mutate(
    DiasEntreCompras = as.numeric(difftime(UltimaCompra, PrimeiraCompra, units = "days")),
    TempoMedio = DiasEntreCompras / (NumCompras - 1)
  ) %>%
  dplyr::summarise(TempoMedioGlobal = mean(TempoMedio, na.rm = TRUE)) %>%
  dplyr::pull(TempoMedioGlobal) %>%
  round(1)
```

- Clientes com múltiplas compras: `r clientes_multiplas_compras`
- Taxa de recompra: `r taxa_recompra`%
- Average Time Between Purchases: `r media_tempo_compras` days

```{r}
# Preparar dados de coorte
cohort_data <- dfinal %>%
  group_by(CustomerKey) %>%
  summarise(PrimeiraCompra = min(OrderDate, na.rm = TRUE), .groups = "drop") %>%
  left_join(dfinal, by = "CustomerKey") %>%
  mutate(
    AnoCohorte = year(PrimeiraCompra),
    CohortMonth = format(floor_date(PrimeiraCompra, "month"), "%Y-%m"),
    CohortIndex = as.integer((year(OrderDate) - year(PrimeiraCompra)) * 12 + (month(OrderDate) - month(PrimeiraCompra)) + 1)
  ) %>%
  filter(CohortIndex > 0 & CohortIndex <= 12)

cohort_retention <- cohort_data %>%
  group_by(AnoCohorte, CohortMonth, CohortIndex) %>%
  summarise(UsuariosAtivos = n_distinct(CustomerKey), .groups = "drop") %>%
  left_join(
    cohort_data %>%
      group_by(CohortMonth) %>%
      summarise(CohortSize = n_distinct(CustomerKey), .groups = "drop"),
    by = "CohortMonth"
  ) %>%
  mutate(Retencao = UsuariosAtivos / CohortSize)

#| title: "Análise de Retenção por Cohorte"
#| echo: false

anos <- unique(cohort_retention$AnoCohorte)

```{r}
#| results: 'asis'
for (ano in anos) {
  cat("## Retenção de Clientes -", ano, "\n\n")
  
  dados_ano <- cohort_retention %>% filter(AnoCohorte == ano)
  print(
    ggplot(dados_ano, aes(x = CohortIndex, y = CohortMonth, fill = Retencao)) +
      geom_tile(color = "white") +
      scale_fill_gradient2(low = "#f7fbff", mid = "#6baed6", high = "#08306b", midpoint = 0.5, labels = scales::percent) +
      geom_text(aes(label = ifelse(Retencao > 0, scales::percent(Retencao, accuracy = 1), "")), size = 3, color = "black") +
      scale_x_continuous(breaks = 1:12, labels = paste0(1:12, "º mês")) +
      labs(
        title = paste("Retenção de Clientes - Cohortes de", ano),
        x = "Meses desde a 1ª compra",
        y = "Cohorte (Ano-Mês da 1ª compra)",
        fill = "Retenção"
      ) +
      theme_minimal() +
      theme(
        axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10),
        axis.text.y = element_text(size = 10),
        plot.title = element_text(face = "bold", hjust = 0.5)
      )
  )
  cat("\n\n")
}
```